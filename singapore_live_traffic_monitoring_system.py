# -*- coding: utf-8 -*-
"""Singapore Live Traffic Monitoring System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1isCOXr3McmUDchRnCPmxrrip0QA3KJw7

# Step 1: Set up Google Colab Environment
"""

# Commented out IPython magic to ensure Python compatibility.
# Clone the YOLOv5 repository and install necessary dependencies
!git clone https://github.com/ultralytics/yolov5
# %cd yolov5
!pip install -r requirements.txt

# Install additional required libraries
!pip install opencv-python requests

"""# Step 2: Download Pretrained YOLOv5 Model
YOLOv5 comes with pretrained models. For vehicle detection, you can use yolov5s, which is a lightweight version, but you can also choose yolov5m or yolov5l for more accuracy (with slightly higher latency).
"""

# Commented out IPython magic to ensure Python compatibility.
# Clone the YOLOv5 repository
!git clone https://github.com/ultralytics/yolov5.git
# %cd yolov5

# Install dependencies
!pip install -r requirements.txt

# Upload your video file to Colab
from google.colab import files
uploaded = files.upload()

# Move the uploaded video file to the working directory
import shutil
shutil.move(list(uploaded.keys())[0], '/content/video.mp4')

# Run YOLOv5 on the uploaded video
!python detect.py --weights yolov5s.pt --img 640 --conf 0.4 --source /content/video.mp4 --save-txt --save-conf

# Check the contents of the output folder to verify images are created
import os

image_folder = '/content/yolov5/runs/detect/exp'
output_images = [img for img in os.listdir(image_folder) if img.endswith(".jpg") or img.endswith(".png")]
print("Output images:", output_images)  # Display contents of the directory

# Create video from the saved images
import cv2

# If no images were saved, inform the user
if not output_images:
    print("No images found in the output folder.")
else:
    # Sort images to maintain the order
    output_images.sort()

    # Get the size of the first image
    first_frame = cv2.imread(os.path.join(image_folder, output_images[0]))
    height, width, layers = first_frame.shape

    # Define the video codec and create VideoWriter object
    output_video_path = '/content/output_video.mp4'
    video = cv2.VideoWriter(output_video_path, cv2.VideoWriter_fourcc(*'mp4v'), 30, (width, height))

    for image in output_images:
        video.write(cv2.imread(os.path.join(image_folder, image)))

    cv2.destroyAllWindows()
    video.release()

    # Display the generated video
    import io
    import base64
    from IPython.display import HTML

    def show_video(video_path, width=640):
        video_file = io.open(video_path, "r+b").read()
        encoded = base64.b64encode(video_file)
        return HTML(data=f'''<video width="{width}" controls>
                              <source src="data:video/mp4;base64,{encoded.decode('ascii')}" type="video/mp4" />
                            </video>''')

    # Show the output video
    display(show_video(output_video_path))

